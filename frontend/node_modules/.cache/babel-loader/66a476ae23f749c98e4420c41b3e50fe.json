{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = require(\"prop-types\");\n\nvar cache = {};\nvar imgPropTypes = {\n  loader: _propTypes.node,\n  unloader: _propTypes.node,\n  decode: _propTypes.bool,\n  src: (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.array]),\n  container: _propTypes.func,\n  loaderContainer: _propTypes.func,\n  unloaderContainer: _propTypes.func\n};\n\nif (\"production\" != 'production' && \"production\" != 'test') {\n  imgPropTypes.containermockImage = (0, _propTypes.instanceOf)(Image); //used for testing only\n}\n\nvar Img =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2.default)(Img, _Component);\n\n  function Img(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Img);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Img).call(this, props)); // default loader/unloader container to just container. If no container was set\n    // this will be a noop\n\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"srcToArray\", function (src) {\n      return (Array.isArray(src) ? src : [src]).filter(function (x) {\n        return x;\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"onLoad\", function () {\n      cache[_this.sourceList[_this.state.currentIndex]] = true;\n      /* istanbul ignore else */\n\n      if (_this.i) _this.setState({\n        isLoaded: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"onError\", function () {\n      cache[_this.sourceList[_this.state.currentIndex]] = false; // if the current image has already been destroyed, we are probably no longer mounted\n      // no need to do anything then\n\n      /* istanbul ignore else */\n\n      if (!_this.i) return false; // before loading the next image, check to see if it was ever loaded in the past\n\n      for (var nextIndex = _this.state.currentIndex + 1; nextIndex < _this.sourceList.length; nextIndex++) {\n        // get next img\n        var src = _this.sourceList[nextIndex]; // if we have never seen it, its the one we want to try next\n\n        if (!(src in cache)) {\n          _this.setState({\n            currentIndex: nextIndex\n          });\n\n          break;\n        } // if we know it exists, use it!\n\n\n        if (cache[src] === true) {\n          _this.setState({\n            currentIndex: nextIndex,\n            isLoading: false,\n            isLoaded: true\n          });\n\n          return true;\n        } // if we know it doesn't exist, skip it!\n\n        /* istanbul ignore else */\n\n\n        if (cache[src] === false) continue;\n      } // currentIndex is zero bases, length is 1 based.\n      // if we have no more sources to try, return - we are done\n\n\n      if (nextIndex === _this.sourceList.length) return _this.setState({\n        isLoading: false\n      }); // otherwise, try the next img\n\n      _this.loadImg();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"loadImg\", function () {\n      if (\"production\" != 'production') {\n        _this.i = _this.props.mockImage || new Image();\n      } else {\n        _this.i = new Image();\n      }\n\n      _this.i.src = _this.sourceList[_this.state.currentIndex];\n\n      if (_this.props.decode && _this.i.decode) {\n        _this.i.decode().then(_this.onLoad).catch(_this.onError);\n      } else {\n        _this.i.onload = _this.onLoad;\n      }\n\n      _this.i.onerror = _this.onError;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"unloadImg\", function () {\n      delete _this.i.onerror;\n      delete _this.i.onload;\n\n      try {\n        delete _this.i.src;\n      } catch (e) {// On Safari in Strict mode this will throw an exception,\n        //  - https://github.com/mbrevda/react-image/issues/187\n        // We don't need to do anything about it.\n      }\n\n      delete _this.i;\n    });\n    _this.loaderContainer = props.loaderContainer || props.container;\n    _this.unloaderContainer = props.unloaderContainer || props.container;\n    _this.sourceList = _this.srcToArray(_this.props.src); // check cache to decide at which index to start\n\n    for (var i = 0; i < _this.sourceList.length; i++) {\n      // if we've never seen this image before, the cache wont help.\n      // no need to look further, just start loading\n\n      /* istanbul ignore else */\n      if (!(_this.sourceList[i] in cache)) break; // if we have loaded this image before, just load it again\n\n      /* istanbul ignore else */\n\n      if (cache[_this.sourceList[i]] === true) {\n        _this.state = {\n          currentIndex: i,\n          isLoading: false,\n          isLoaded: true\n        };\n        return (0, _possibleConstructorReturn2.default)(_this, true);\n      }\n    }\n\n    _this.state = _this.sourceList.length ? // 'normal' opperation: start at 0 and try to load\n    {\n      currentIndex: 0,\n      isLoading: true,\n      isLoaded: false\n    } : // if we dont have any sources, jump directly to unloaded\n    {\n      isLoading: false,\n      isLoaded: false\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(Img, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // kick off process\n\n      /* istanbul ignore else */\n      if (this.state.isLoading) this.loadImg();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // ensure that we dont leave any lingering listeners\n\n      /* istanbul ignore else */\n      if (this.i) this.unloadImg();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      this.loaderContainer = nextProps.loaderContainer || nextProps.container;\n      this.unloaderContainer = nextProps.unloaderContainer || nextProps.container;\n      var src = this.srcToArray(nextProps.src);\n      var srcAdded = src.filter(function (s) {\n        return _this2.sourceList.indexOf(s) === -1;\n      });\n      var srcRemoved = this.sourceList.filter(function (s) {\n        return src.indexOf(s) === -1;\n      }); // if src prop changed, restart the loading process\n\n      if (srcAdded.length || srcRemoved.length) {\n        this.sourceList = src; // if we dont have any sources, jump directly to unloader\n\n        if (!src.length) return this.setState({\n          isLoading: false,\n          isLoaded: false\n        });\n        this.setState({\n          currentIndex: 0,\n          isLoading: true,\n          isLoaded: false\n        }, this.loadImg);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // set img props as rest\n      var _this$props = this.props,\n          container = _this$props.container,\n          loader = _this$props.loader,\n          unloader = _this$props.unloader,\n          src = _this$props.src,\n          decode = _this$props.decode,\n          loaderContainer = _this$props.loaderContainer,\n          unloaderContainer = _this$props.unloaderContainer,\n          mockImage = _this$props.mockImage,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"container\", \"loader\", \"unloader\", \"src\", \"decode\", \"loaderContainer\", \"unloaderContainer\", \"mockImage\"]); //eslint-disable-line\n      // if we have loaded, show img\n\n      if (this.state.isLoaded) {\n        var imgProps = (0, _objectSpread2.default)({}, {\n          src: this.sourceList[this.state.currentIndex]\n        }, rest);\n        return container(_react.default.createElement(\"img\", imgProps));\n      } // if we are still trying to load, show img and a loader if requested\n\n\n      if (!this.state.isLoaded && this.state.isLoading) {\n        return loader ? this.loaderContainer(loader) : null;\n      } // if we have given up on loading, show a place holder if requested, or nothing\n\n      /* istanbul ignore else */\n\n\n      if (!this.state.isLoaded && !this.state.isLoading) {\n        return unloader ? this.unloaderContainer(unloader) : null;\n      }\n    }\n  }]);\n  return Img;\n}(_react.Component);\n\n(0, _defineProperty2.default)(Img, \"defaultProps\", {\n  loader: false,\n  unloader: false,\n  decode: true,\n  src: [],\n  // by default, just return what gets sent in. Can be used for advanced rendering\n  // such as animations\n  container: function container(x) {\n    return x;\n  }\n});\nImg.propTypes = \"production\" !== \"production\" ? imgPropTypes : {};\nvar _default = Img;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}